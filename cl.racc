# racc -v -g cl.racc

class ClParser

options no_result_var

prechigh
  left '||'
  nonassoc '='
preclow

rule

  program   : stmt_list
                {
                  RootNode.new(val[0])
                }

  stmt_list :
                {
                  result = []
                }
            | stmt_list stmt EOL
                {
                  val[0].push val[1]
                }
            | stmt_list EOL

  stmt      : command
            | label command
                {
                  val[1]
                }
            | if_stmt
            | label

  command   : IDENT parms
                {
                  CommandNode.new(@file_name, val[0][0], val[0][1], val[1])
                }
            | IDENT args
                {
                  CommandNode.new(@file_name, val[0][0], val[0][1], val[1])
                }
            | IDENT
                {
                  CommandNode.new(@file_name, val[0][0], val[0][1], nil)
                }

  label     : IDENT ':'

  if_stmt   : IF COND '(' expr ')' THEN '(' command ')'
                {
                  IfNode.new(@file_name, val[0][0], val[3], val[7])
                }

  parms     : parm
                {
                  [val[0]]
                }
            | parms parm
                {
                  val[0].push(val[1])
                }

  parm      : IDENT '(' args ')'
                {
                  ParmNode.new(@file_name, val[0][0], val[0][1], val[2])
                }
            | IDENT '(' primary '(' NUMBER NUMBER ')' ')' # 例.DTAARA(WRKLIB/AREA1 (1 7))
            | CMD '(' IDENT IDENT  '(' IDENT ')' ')'      # 例.CMD(CALL PGM(PGM1A))

  args      : primary
                {
                  [val[0]]
                }
            | args primary
                {
                  val[0].push(val[1])
                }
 
  expr      : primary '=' primary
                {
                   [val[0][0], val[0][1] + '=' + val[2][1]]  
                }
            | primary '||' primary
                {
                   [val[0][0], val[0][1] + val[2][1]]                     
                }

  function  : SST '(' args ')'

  primary   : IDENT
                {
                   val[0]
                }
            | NUMBER
                {
                   val[0]
                }
            | STRING
                {
                   val[0]
                }
            | RESERVED
                {
                   val[0]
                }
            | IDENT '/' IDENT
                {
                   val[0]
                }
            | function
            | expr  

end

---- header ----
#
# generated by racc
#
require './cl.rex.rb'

---- inner ----

  def parse(file, file_name)
    @file_name = file_name
    @q = ClLexer.new
    @q.load_file(file_name)
    @yydebug = true
    do_parse
  end

  def next_token
    @q.next_token
  end

  def on_error(t, v, values)
    if v
      line = v[0]
      v = v[1]
    else
      line = 'last'
    end
    raise Racc::ParseError, "#{@file_name}:#{line}: syntax error on #{v.inspect}"
  end
