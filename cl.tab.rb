#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

#
# generated by racc
#
require './cl.rex.rb'

class ClParser < Racc::Parser

module_eval(<<'...end cl.racc/module_eval...', 'cl.racc', 122)

  def parse(file, file_name)
    @file_name = file_name
    @q = ClLexer.new
    @q.load_file(file_name)
    @yydebug = true
    do_parse
  end

  def next_token
    @q.next_token
  end

  def on_error(t, v, values)
    if v
      line = v[0]
      v = v[1]
    else
      line = 'last'
    end
    raise Racc::ParseError, "#{@file_name}:#{line}: syntax error on #{v.inspect}"
  end
...end cl.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    28,    33,    32,    33,    32,    28,    19,    46,    18,    20,
    21,    19,    28,    18,    20,    21,    33,    32,    19,    28,
    18,    20,    21,    48,    15,    19,     3,    18,    20,    21,
    19,    16,    18,    20,    21,    28,     5,     8,     9,    33,
   -28,    19,    28,    18,    20,    21,    45,    28,    19,     8,
    18,    20,    21,    19,    28,    18,    20,    21,    29,    38,
    19,    26,    18,    20,    21,    30,    30,    29,    16,    33,
    32,    35,    34,    31,    47,    24,    11,    49,    10,    50,
    51,    52,    53,    54,     8,    56,    57 ]

racc_action_check = [
    32,    37,    37,    27,    27,    33,    32,    37,    32,    32,
    32,    33,    34,    33,    33,    33,    17,    17,    34,    42,
    34,    34,    34,    42,     8,    42,     1,    42,    42,    42,
     8,     8,     8,     8,     8,    35,     2,     2,     2,    40,
    40,    35,    36,    35,    35,    35,    36,    13,    36,    31,
    36,    36,    36,    13,    29,    13,    13,    13,    15,    30,
    29,    12,    29,    29,    29,    28,    15,    26,    12,    44,
    44,    24,    18,    16,    39,     9,     4,    43,     3,    46,
    49,    50,    51,    52,    53,    54,    55 ]

racc_action_pointer = [
   nil,    26,    32,    78,    72,   nil,   nil,   nil,    19,    68,
   nil,   nil,    56,    42,   nil,    50,    65,    14,    64,   nil,
   nil,   nil,   nil,   nil,    63,   nil,    59,     1,    49,    49,
    54,    44,    -5,     0,     7,    30,    37,    -1,   nil,    65,
    37,   nil,    14,    68,    67,   nil,    68,   nil,   nil,    70,
    70,    74,    74,    79,    76,    77,   nil,   nil ]

racc_action_default = [
    -2,   -28,    -1,   -28,   -28,    -4,    -5,    -6,    -9,   -28,
    58,    -3,    -7,    -8,   -11,   -21,   -28,   -16,   -28,   -22,
   -23,   -24,   -26,   -27,   -28,   -12,   -28,   -17,   -21,   -28,
   -28,   -28,   -28,   -28,   -28,   -28,   -28,   -16,   -25,   -28,
   -18,   -19,   -28,   -27,   -28,   -13,   -28,   -15,   -20,   -28,
   -28,   -28,   -28,   -28,   -28,   -28,   -14,   -10 ]

racc_goto_table = [
     6,    17,    14,    12,     7,     4,    25,    43,     2,    13,
     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,   nil,   nil,    40,    41,    17,    44,    39,
    36,   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    55 ]

racc_goto_check = [
     4,    10,     9,     6,     5,     3,     9,     8,     2,     7,
     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,    10,    10,    10,    10,     4,
     7,   nil,   nil,   nil,   nil,     7,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4 ]

racc_goto_pointer = [
   nil,    10,     8,     3,    -2,     2,    -5,     1,   -28,    -6,
    -7,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,
    27,    22 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 18, :_reduce_1,
  0, 19, :_reduce_2,
  3, 19, :_reduce_3,
  2, 19, :_reduce_none,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  2, 21, :_reduce_7,
  2, 21, :_reduce_8,
  1, 21, :_reduce_9,
  9, 22, :_reduce_10,
  1, 23, :_reduce_11,
  2, 23, :_reduce_12,
  4, 26, :_reduce_13,
  8, 26, :_reduce_none,
  4, 26, :_reduce_15,
  1, 24, :_reduce_16,
  2, 24, :_reduce_17,
  3, 25, :_reduce_18,
  3, 25, :_reduce_19,
  4, 28, :_reduce_none,
  1, 27, :_reduce_21,
  1, 27, :_reduce_22,
  1, 27, :_reduce_23,
  1, 27, :_reduce_24,
  3, 27, :_reduce_25,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none ]

racc_reduce_n = 28

racc_shift_n = 58

racc_token_table = {
  false => 0,
  :error => 1,
  "||" => 2,
  "=" => 3,
  :EOL => 4,
  :IDENT => 5,
  :IF => 6,
  :COND => 7,
  "(" => 8,
  ")" => 9,
  :THEN => 10,
  :NUMBER => 11,
  :CMD => 12,
  :SST => 13,
  :STRING => 14,
  :RESERVED => 15,
  "/" => 16 }

racc_nt_base = 17

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"||\"",
  "\"=\"",
  "EOL",
  "IDENT",
  "IF",
  "COND",
  "\"(\"",
  "\")\"",
  "THEN",
  "NUMBER",
  "CMD",
  "SST",
  "STRING",
  "RESERVED",
  "\"/\"",
  "$start",
  "program",
  "stmt_list",
  "stmt",
  "command",
  "if_stmt",
  "parms",
  "args",
  "expr",
  "parm",
  "primary",
  "function" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'cl.racc', 15)
  def _reduce_1(val, _values)
                      RootNode.new(val[0])
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 20)
  def _reduce_2(val, _values)
                      []
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 24)
  def _reduce_3(val, _values)
                      val[0].push val[1]
                
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'cl.racc', 33)
  def _reduce_7(val, _values)
                      CommandNode.new(@file_name, val[0][0], val[0][1], val[1])
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 37)
  def _reduce_8(val, _values)
                      CommandNode.new(@file_name, val[0][0], val[0][1], val[1])
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 41)
  def _reduce_9(val, _values)
                      CommandNode.new(@file_name, val[0][0], val[0][1], nil)
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 46)
  def _reduce_10(val, _values)
                      IfNode.new(@file_name, val[0][0], val[3], val[7])
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 51)
  def _reduce_11(val, _values)
                      [val[0]]
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 55)
  def _reduce_12(val, _values)
                      val[0].push(val[1])
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 60)
  def _reduce_13(val, _values)
                      ParmNode.new(@file_name, val[0][0], val[0][1], val[2])
                
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'cl.racc', 65)
  def _reduce_15(val, _values)
                      val[2]
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 71)
  def _reduce_16(val, _values)
                      [val[0]]
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 75)
  def _reduce_17(val, _values)
                      val[0].push(val[1])
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 80)
  def _reduce_18(val, _values)
                       [val[0][0], val[0][1] + '=' + val[2][1]]  
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 84)
  def _reduce_19(val, _values)
                       [val[0][0], val[0][1] + val[2][1]]                     
                
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'cl.racc', 91)
  def _reduce_21(val, _values)
                       val[0]
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 95)
  def _reduce_22(val, _values)
                       val[0]
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 99)
  def _reduce_23(val, _values)
                       val[0]
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 103)
  def _reduce_24(val, _values)
                       val[0]
                
  end
.,.,

module_eval(<<'.,.,', 'cl.racc', 107)
  def _reduce_25(val, _values)
                       val[0]
                
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

def _reduce_none(val, _values)
  val[0]
end

end   # class ClParser
